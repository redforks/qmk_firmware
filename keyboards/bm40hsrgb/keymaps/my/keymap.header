#include QMK_KEYBOARD_H

enum custom_keycodes {
    VIM_YANK = SAFE_RANGE,
    VIM_PASTE,
    PHP_THIS,
    PHP_SELF,
    PHP_ARROW,
    KENNER_DB,
    KENNER_CRM
};

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
    switch (keycode) {
    case VIM_YANK:
        if (record->event.pressed) {
            SEND_STRING("\"+y");
        }
        break;

    case VIM_PASTE:
        if (record->event.pressed) {
            SEND_STRING("\"+p");
        }
        break;

    case PHP_THIS:
        if (record->event.pressed) {
            SEND_STRING("$this->");
        }
        break;

    case PHP_SELF:
        if (record->event.pressed) {
            SEND_STRING("self::");
        }
        break;

    case PHP_ARROW:
        if (record->event.pressed) {
            SEND_STRING("->");
        }
        break;

    case KENNER_DB:
        if (record->event.pressed) {
            SEND_STRING("Kenner@root123");
        }
        break;

    case KENNER_CRM:
        if (record->event.pressed) {
            SEND_STRING("/home/tomcat/apache-tomcat-8.0.43/webapps/crm/");
        }
        break;

    }
    return true;
};

#define MY_HSV_WHITE 0, 0, 255
#define MY_HSV_RED 0, 255, 255
#define MY_HSV_CORAL 11, 176, 255
#define MY_HSV_ORANGE 28, 255, 255
#define MY_HSV_GOLDENROD 30, 218, 64
#define MY_HSV_GOLD 36, 255, 72
#define MY_HSV_YELLOW 43, 255, 72
#define MY_HSV_CHARTREUSE 64, 255, 255
#define MY_HSV_GREEN 85, 255, 127
#define MY_HSV_SPRINGGREEN 106, 255, 255
#define MY_HSV_TURQUOISE 123, 90, 112
#define MY_HSV_TEAL 128, 255, 128
#define MY_HSV_CYAN 128, 255, 255
#define MY_HSV_AZURE 132, 102, 255
#define MY_HSV_BLUE 170, 255, 255
#define MY_HSV_PURPLE 191, 255, 255
#define MY_HSV_MAGENTA 213, 255, 255
#define MY_HSV_PINK 234, 128, 255

const rgblight_segment_t PROGMEM cap_lock_layer[] = RGBLIGHT_LAYER_SEGMENTS(
    {44, 1, MY_HSV_AZURE}
);

const rgblight_segment_t PROGMEM my_layer0_layer[] = RGBLIGHT_LAYER_SEGMENTS(
    {13, 4, MY_HSV_GREEN},
    {19, 4, MY_HSV_GREEN}
);

const rgblight_segment_t PROGMEM my_layer1_layer[] = RGBLIGHT_LAYER_SEGMENTS(
    {1, 10, MY_HSV_GOLDENROD},
    {13, 10, MY_HSV_GOLD}
);

const rgblight_segment_t PROGMEM my_layer2_layer[] = RGBLIGHT_LAYER_SEGMENTS(
    {13, 1, HSV_OFF}
);

const rgblight_segment_t PROGMEM my_layer3_layer[] = RGBLIGHT_LAYER_SEGMENTS(
    {13, 1, HSV_OFF}
);

const rgblight_segment_t PROGMEM my_layer5_layer[] = RGBLIGHT_LAYER_SEGMENTS(
    {13, 4, HSV_OFF},
    {19, 4, HSV_OFF},
    {23, 1, HSV_RED},
    {41, 1, HSV_PURPLE}
);

const rgblight_segment_t PROGMEM my_layer6_layer[] = RGBLIGHT_LAYER_SEGMENTS(
    {7, 3, MY_HSV_GREEN},
    {13, 4, HSV_OFF},
    {19, 3, MY_HSV_GREEN},
    {22, 1, HSV_OFF},
    {31, 3, MY_HSV_GREEN},
    {42, 1, MY_HSV_GREEN}
);

// Now define the array of layers. Later layers take precedence
const rgblight_segment_t* const PROGMEM my_rgb_layers[] = RGBLIGHT_LAYERS_LIST(
    my_layer0_layer,
    my_layer1_layer,
    my_layer2_layer,
    my_layer3_layer,
    my_layer3_layer,
    my_layer5_layer,
    my_layer6_layer,
    cap_lock_layer
);

void keyboard_post_init_user(void) {
    // Enable the LED layers
    rgblight_layers = my_rgb_layers;
}

bool led_update_user(led_t led_state) {
    rgblight_set_layer_state(7, led_state.caps_lock);
    return true;
}
 
layer_state_t default_layer_state_set_user(layer_state_t state) {
    rgblight_set_layer_state(0, layer_state_cmp(state, 0));
    return state;
}

layer_state_t layer_state_set_user(layer_state_t state) {
    rgblight_set_layer_state(1, layer_state_cmp(state, 1));
    rgblight_set_layer_state(2, layer_state_cmp(state, 2));
    rgblight_set_layer_state(5, layer_state_cmp(state, 5));
    rgblight_set_layer_state(6, layer_state_cmp(state, 6));
    return state;
}

// Tap Dance declarations
enum {
    TD_SLASH,
};

// Tap Dance definitions
qk_tap_dance_action_t tap_dance_actions[] = {
    [TD_SLASH] = ACTION_TAP_DANCE_DOUBLE(KC_SLSH, KC_BSLS),
};

LEADER_EXTERNS();

void matrix_scan_user(void) {
  LEADER_DICTIONARY() {
    leading = false;
    leader_end();

    SEQ_TWO_KEYS(KC_E, KC_E) {
      SEND_STRING(SS_TAP(X_END));
    }
    SEQ_TWO_KEYS(KC_E, KC_H) {
      SEND_STRING(SS_TAP(X_HOME));
    }

    SEQ_TWO_KEYS(KC_G, KC_S) {
      SEND_STRING("git flow feature start ");
    }
    SEQ_TWO_KEYS(KC_G, KC_F) {
      SEND_STRING("git flow finish");
    }
    SEQ_TWO_KEYS(KC_G, KC_P) {
      SEND_STRING("git push");
    }

    SEQ_TWO_KEYS(KC_D, KC_U) {
      SEND_STRING("docker-compose up -d mysql redis beanstalkd crm crm_sidekick");
    }
    SEQ_TWO_KEYS(KC_D, KC_R) {
      SEND_STRING("docker-compose restart crm");
    }
    SEQ_TWO_KEYS(KC_D, KC_D) {
      SEND_STRING("docker-compose down");
    }
    SEQ_TWO_KEYS(KC_D, KC_E) {
      SEND_STRING("docker-compose exec crm_sidekick bash");
    }

    SEQ_TWO_KEYS(KC_S, KC_S) {
      SEND_STRING("ssh kenner");
    }

    SEQ_ONE_KEY(KC_P) {
      SEND_STRING("private ");
    }
    SEQ_TWO_KEYS(KC_P, KC_P) {
      SEND_STRING("public ");
    }
    SEQ_THREE_KEYS(KC_P, KC_P, KC_P) {
      SEND_STRING("protected ");
    }

    SEQ_ONE_KEY(KC_F) {
      SEND_STRING("function ");
    }
    SEQ_ONE_KEY(KC_R) {
      SEND_STRING("return");
    }
  }
}
